{"version":3,"sources":["assets/logos/logo-symbol.svg","assets/logos/logo-type.svg","assets/logos/logo-twitter.svg","assets/logos/heart.svg","components/Hero/Nav/Nav.js","components/Hero/Hero.js","services/api.js","components/TeamGrid/TeamGrid.js","pages/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Nav","react_default","a","createElement","className","src","Symbol","alt","LogoType","data-target","Hero","props","Hero_Nav_Nav","title","desc","LogoTwitter","api","axios","create","baseURL","TeamGrid","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","members","loading","setState","get","then","result","_this2","data","console","log","_context","t0","loadMembers","map","member","avatar","name","key","href","twitter","role","tweet","Heart","Component","Homepage","id","components_Hero_Hero","TeamGrid_TeamGrid_TeamGrid","App","pages_Homepage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c05a6061.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-symbol.3009a01a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-type.dc5a20d9.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-twitter.1ff45197.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.dea306f4.svg\";","import React from \"react\";\r\nimport Symbol from '../../../assets/logos/logo-symbol.svg';\r\nimport LogoType from '../../../assets/logos/logo-type.svg';\r\nimport './Nav.css';\r\n\r\nconst Nav = () => {\r\n  return (\r\n      <div className=\"hero-head\">\r\n          <nav className=\"navbar\">\r\n              <div className=\"container\">\r\n                  <div className=\"navbar-brand\">               \r\n                        <span className=\"logo\">\r\n                            <img className=\"symbol\" src={Symbol} alt=\"Startaê Logo Symbol\" />\r\n                            <img className=\"is-hidden-mobile\" src={LogoType} alt=\"Startaê LogoType\" />\r\n                        </span>                      \r\n                        <span className=\"navbar-burger burger\" data-target=\"navbarMenuHeroA\">\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                        </span>\r\n                    </div>\r\n                  </div>\r\n          </nav>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport Nav from './Nav/Nav';\r\nimport './Hero.css';\r\nimport LogoTwitter from '../../assets/logos/logo-twitter.svg';\r\n\r\nconst Hero = (props) => {\r\n  return (\r\n      <section className=\"hero is-purple asymmetric\">\r\n        <Nav />  \r\n        <div className=\"hero-body has-text-white\">\r\n          <div className=\"container is-fluid\">\r\n            <h1 className=\"hero-title\">{props.title}</h1>\r\n            <p className=\"hero-desc is-size-5\">{props.desc}</p>\r\n           \r\n          </div>  \r\n        </div>\r\n        <div className=\"hero-foot\">\r\n            <div className=\"is-fluid\">\r\n              <h2 className=\"tweets-title\"><img src={LogoTwitter} alt=\"Twitter Logo\" /> Latest tweets from our team</h2>\r\n            </div>\r\n        </div>\r\n      </section>\r\n  );\r\n};\r\n\r\nexport default Hero;\r\n","import axios from 'axios';\r\n\r\nconst api = axios.create({ baseURL: 'https://gist.githubusercontent.com/sales/f961f967c6668c7c1c3ed565e3bf94e8/raw/71168b72d9a3a199bd1de01026b5031875f6d432'});\r\n\r\nexport default api;","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport Heart from '../../assets/logos/heart.svg';\r\nimport './TeamGrid.css';\r\n\r\nexport default class TeamGrid extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        members: [],\r\n        loading: false\r\n    };\r\n  }\r\n  \r\n  async loadMembers() {\r\n      this.setState({ loading: true }); \r\n      try {\r\n          await api.get('/team.json')\r\n                    .then(result => {\r\n                  this.setState({\r\n                      members: result.data\r\n                  });\r\n              });\r\n      } catch (err) {\r\n          console.log('Error loading response: ', err);\r\n      }\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.loadMembers();\r\n  }\r\n\r\n  render() {\r\n    const { members } = this.state\r\n    return (\r\n      <section className=\"bg-red\">\r\n        <div className=\"grid-wrapper\">\r\n            <div className=\"grid container is-fluid\">\r\n              {\r\n                members.map(member => (  \r\n                    <div className=\"card\">\r\n                      <div className=\"card-content\">\r\n                        <figure className=\"avatar\">\r\n                          <img src={member.avatar} alt={member.name} />\r\n                        </figure>\r\n                        <h3 className=\"member-name\" key={member.name}>{member.name}</h3>\r\n                        <div><a href={member.twitter} className=\"member-twitter\">@{member.name}</a></div>\r\n                        <span className=\"member-role\">{member.role}</span>\r\n                        <p className=\"member-tweet\"><i>\"{member.tweet}\"</i></p>\r\n                        <figure className=\"icon-heart is-pulled-right\"><img src={Heart} alt=\"Heart icon\" />1</figure>\r\n                      </div>\r\n                  </div>  \r\n                ))\r\n              }\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n ","import React from 'react';\r\nimport Hero from '../components/Hero/Hero';\r\nimport TeamGrid from '../components/TeamGrid/TeamGrid';\r\nimport '../App.css';\r\n\r\nconst Homepage = () => (\r\n  <div id=\"homepage\">\r\n      <Hero title=\"Meet our team\" desc=\"We are a group of multi-skilled individuals who are entrepreneurial by nature and live to make digital products and services that people love to use.\"/>\r\n      <TeamGrid />  \r\n  </div>\r\n)\r\n\r\nexport default Homepage;","import React from 'react';\r\nimport Homepage from './pages/Homepage';\r\n\r\nconst App = () => <Homepage /> \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Homepage from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Homepage />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}